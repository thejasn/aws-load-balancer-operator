package main

func GetIAMPolicy() IAMPolicy {
	return IAMPolicy{Version: "2012-10-17", Statement: []PolicyStatement{{Effect: "Allow", Action: []string{"iam:CreateServiceLinkedRole"}, Resource: "*", Condition: map[string]map[string]string{"StringEquals": {"iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"}}}, {Effect: "Allow", Action: []string{"ec2:DescribeAccountAttributes", "ec2:DescribeAddresses", "ec2:DescribeAvailabilityZones", "ec2:DescribeInternetGateways", "ec2:DescribeVpcs", "ec2:DescribeVpcPeeringConnections", "ec2:DescribeSubnets", "ec2:DescribeSecurityGroups", "ec2:DescribeInstances", "ec2:DescribeNetworkInterfaces", "ec2:DescribeTags", "ec2:GetCoipPoolUsage", "ec2:DescribeCoipPools", "elasticloadbalancing:DescribeLoadBalancers", "elasticloadbalancing:DescribeLoadBalancerAttributes", "elasticloadbalancing:DescribeListeners", "elasticloadbalancing:DescribeListenerCertificates", "elasticloadbalancing:DescribeSSLPolicies", "elasticloadbalancing:DescribeRules", "elasticloadbalancing:DescribeTargetGroups", "elasticloadbalancing:DescribeTargetGroupAttributes", "elasticloadbalancing:DescribeTargetHealth", "elasticloadbalancing:DescribeTags"}, Resource: "*", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"cognito-idp:DescribeUserPoolClient", "acm:ListCertificates", "acm:DescribeCertificate", "iam:ListServerCertificates", "iam:GetServerCertificate", "waf-regional:GetWebACL", "waf-regional:GetWebACLForResource", "waf-regional:AssociateWebACL", "waf-regional:DisassociateWebACL", "wafv2:GetWebACL", "wafv2:GetWebACLForResource", "wafv2:AssociateWebACL", "wafv2:DisassociateWebACL", "shield:GetSubscriptionState", "shield:DescribeProtection", "shield:CreateProtection", "shield:DeleteProtection"}, Resource: "*", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"ec2:AuthorizeSecurityGroupIngress", "ec2:RevokeSecurityGroupIngress"}, Resource: "*", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"ec2:CreateSecurityGroup"}, Resource: "*", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"ec2:CreateTags"}, Resource: "arn:aws:ec2:*:*:security-group/*", Condition: map[string]map[string]string{"StringEquals": {"ec2:CreateAction": "CreateSecurityGroup"}, "Null": {"aws:RequestTag/elbv2.k8s.aws/cluster": "false"}}}, {Effect: "Allow", Action: []string{"ec2:CreateTags", "ec2:DeleteTags"}, Resource: "arn:aws:ec2:*:*:security-group/*", Condition: map[string]map[string]string{"Null": {"aws:RequestTag/elbv2.k8s.aws/cluster": "true", "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"}}}, {Effect: "Allow", Action: []string{"ec2:AuthorizeSecurityGroupIngress", "ec2:RevokeSecurityGroupIngress", "ec2:DeleteSecurityGroup"}, Resource: "*", Condition: map[string]map[string]string{"Null": {"aws:ResourceTag/elbv2.k8s.aws/cluster": "false"}}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:CreateLoadBalancer", "elasticloadbalancing:CreateTargetGroup"}, Resource: "*", Condition: map[string]map[string]string{"Null": {"aws:RequestTag/elbv2.k8s.aws/cluster": "false"}}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:CreateListener", "elasticloadbalancing:DeleteListener", "elasticloadbalancing:CreateRule", "elasticloadbalancing:DeleteRule"}, Resource: "*", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:AddTags", "elasticloadbalancing:RemoveTags"}, Resource: "", Condition: map[string]map[string]string{"Null": {"aws:ResourceTag/elbv2.k8s.aws/cluster": "false", "aws:RequestTag/elbv2.k8s.aws/cluster": "true"}}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:AddTags", "elasticloadbalancing:RemoveTags"}, Resource: "", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:ModifyLoadBalancerAttributes", "elasticloadbalancing:SetIpAddressType", "elasticloadbalancing:SetSecurityGroups", "elasticloadbalancing:SetSubnets", "elasticloadbalancing:DeleteLoadBalancer", "elasticloadbalancing:ModifyTargetGroup", "elasticloadbalancing:ModifyTargetGroupAttributes", "elasticloadbalancing:DeleteTargetGroup"}, Resource: "*", Condition: map[string]map[string]string{"Null": {"aws:ResourceTag/elbv2.k8s.aws/cluster": "false"}}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:RegisterTargets", "elasticloadbalancing:DeregisterTargets"}, Resource: "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*", Condition: map[string]map[string]string{}}, {Effect: "Allow", Action: []string{"elasticloadbalancing:SetWebAcl", "elasticloadbalancing:ModifyListener", "elasticloadbalancing:AddListenerCertificates", "elasticloadbalancing:RemoveListenerCertificates", "elasticloadbalancing:ModifyRule"}, Resource: "*", Condition: map[string]map[string]string{}}}}
}
